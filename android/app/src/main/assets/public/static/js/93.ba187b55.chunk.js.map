{"version":3,"sources":["../node_modules/@ionic/core/dist/esm-es5/shadow-css-9e778f69-c68d0961.js"],"names":["__webpack_require__","r","__webpack_exports__","d","scopeCss","_parenSuffix","_cssColonHostRe","RegExp","_cssColonHostContextRe","_cssColonSlottedRe","_polyfillHostNoCombinatorRe","_shadowDOMSelectorsRe","_polyfillHostRe","_colonHostRe","_colonSlottedRe","_colonHostContextRe","_commentRe","_commentWithHashRe","_ruleRe","_curlyRe","processRules","input","ruleCallback","inputWithEscapedBlocks","escapeBlocks","nextBlockIndex","escapedString","replace","m","_i","arguments","length","selector","content","suffix","contentPrefix","startsWith","blocks","substring","rule","inputParts","split","resultParts","escapedBlocks","bracketCount","currentBlockParts","partIndex","part","push","join","convertColonRule","cssText","regExp","partReplacer","parts","i","p","trim","_polyfillHost","colonHostPartReplacer","host","colonHostContextPartReplacer","indexOf","selectorNeedsScoping","scopeSelector","makeScopeMatcher","test","applyStrictSelectorScope","hostSelector","res","className","_","_scopeSelectorPart","scopedP","lastIndex","replaceBy_1","before","colon","after","applySimpleSelectorScope","t","matches","match","safeContent","placeholders","index","keep","replaceBy","pseudo","exp","safeSelector","scopedSelector","startIndex","sep","shouldScope","exec","separator","part_1","slice","scopeSelectors","scopeSelectorText","slotSelector","commentOriginalSelector","map","shallowPart","scopeCssText","scopeId","hostScopeId","slotScopeId","reduce","result","pattern","convertShadowDOMSelectors","slotAttr","compound","convertColonSlotted","convertColonHostContext","convertColonHost","commentsWithHash","stripComments","orgSelectors","processCommentedSelector_1","placeholder","comment","scopedCssText","concat","forEach","_a"],"mappings":"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","file":"static/js/93.ba187b55.chunk.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nvar safeSelector = function safeSelector(selector) {\n  var placeholders = [];\n  var index = 0;\n  var content; // Replaces attribute selectors with placeholders.\n  // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n\n  selector = selector.replace(/(\\[[^\\]]*\\])/g, function (_, keep) {\n    var replaceBy = \"__ph-\" + index + \"__\";\n    placeholders.push(keep);\n    index++;\n    return replaceBy;\n  }); // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n  // WS and \"+\" would otherwise be interpreted as selector separators.\n\n  content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, function (_, pseudo, exp) {\n    var replaceBy = \"__ph-\" + index + \"__\";\n    placeholders.push(exp);\n    index++;\n    return pseudo + replaceBy;\n  });\n  var ss = {\n    content: content,\n    placeholders: placeholders\n  };\n  return ss;\n};\n\nvar restoreSafeSelector = function restoreSafeSelector(placeholders, content) {\n  return content.replace(/__ph-(\\d+)__/g, function (_, index) {\n    return placeholders[+index];\n  });\n};\n\nvar _polyfillHost = '-shadowcsshost';\nvar _polyfillSlotted = '-shadowcssslotted'; // note: :host-context pre-processed to -shadowcsshostcontext.\n\nvar _polyfillHostContext = '-shadowcsscontext';\n\nvar _parenSuffix = ')(?:\\\\((' + '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' + ')\\\\))?([^,{]*)';\n\nvar _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\n\nvar _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\n\nvar _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\n\nvar _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\n\nvar _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nvar _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\nvar _selectorReSuffix = '([>\\\\s~+\\[.,{:][\\\\s\\\\S]*)?$';\nvar _polyfillHostRe = /-shadowcsshost/gim;\nvar _colonHostRe = /:host/gim;\nvar _colonSlottedRe = /::slotted/gim;\nvar _colonHostContextRe = /:host-context/gim;\nvar _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\n\nvar stripComments = function stripComments(input) {\n  return input.replace(_commentRe, '');\n};\n\nvar _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\n\nvar extractCommentsWithHash = function extractCommentsWithHash(input) {\n  return input.match(_commentWithHashRe) || [];\n};\n\nvar _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nvar _curlyRe = /([{}])/g;\nvar OPEN_CURLY = '{';\nvar CLOSE_CURLY = '}';\nvar BLOCK_PLACEHOLDER = '%BLOCK%';\n\nvar processRules = function processRules(input, ruleCallback) {\n  var inputWithEscapedBlocks = escapeBlocks(input);\n  var nextBlockIndex = 0;\n  return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function () {\n    var m = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      m[_i] = arguments[_i];\n    }\n\n    var selector = m[2];\n    var content = '';\n    var suffix = m[4];\n    var contentPrefix = '';\n\n    if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n      content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n      suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n      contentPrefix = '{';\n    }\n\n    var cssRule = {\n      selector: selector,\n      content: content\n    };\n    var rule = ruleCallback(cssRule);\n    return \"\" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix;\n  });\n};\n\nvar escapeBlocks = function escapeBlocks(input) {\n  var inputParts = input.split(_curlyRe);\n  var resultParts = [];\n  var escapedBlocks = [];\n  var bracketCount = 0;\n  var currentBlockParts = [];\n\n  for (var partIndex = 0; partIndex < inputParts.length; partIndex++) {\n    var part = inputParts[partIndex];\n\n    if (part === CLOSE_CURLY) {\n      bracketCount--;\n    }\n\n    if (bracketCount > 0) {\n      currentBlockParts.push(part);\n    } else {\n      if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(''));\n        resultParts.push(BLOCK_PLACEHOLDER);\n        currentBlockParts = [];\n      }\n\n      resultParts.push(part);\n    }\n\n    if (part === OPEN_CURLY) {\n      bracketCount++;\n    }\n  }\n\n  if (currentBlockParts.length > 0) {\n    escapedBlocks.push(currentBlockParts.join(''));\n    resultParts.push(BLOCK_PLACEHOLDER);\n  }\n\n  var strEscapedBlocks = {\n    escapedString: resultParts.join(''),\n    blocks: escapedBlocks\n  };\n  return strEscapedBlocks;\n};\n\nvar insertPolyfillHostInCssText = function insertPolyfillHostInCssText(selector) {\n  selector = selector.replace(_colonHostContextRe, _polyfillHostContext).replace(_colonHostRe, _polyfillHost).replace(_colonSlottedRe, _polyfillSlotted);\n  return selector;\n};\n\nvar convertColonRule = function convertColonRule(cssText, regExp, partReplacer) {\n  // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n  return cssText.replace(regExp, function () {\n    var m = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      m[_i] = arguments[_i];\n    }\n\n    if (m[2]) {\n      var parts = m[2].split(',');\n      var r = [];\n\n      for (var i = 0; i < parts.length; i++) {\n        var p = parts[i].trim();\n        if (!p) break;\n        r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n      }\n\n      return r.join(',');\n    } else {\n      return _polyfillHostNoCombinator + m[3];\n    }\n  });\n};\n\nvar colonHostPartReplacer = function colonHostPartReplacer(host, part, suffix) {\n  return host + part.replace(_polyfillHost, '') + suffix;\n};\n\nvar convertColonHost = function convertColonHost(cssText) {\n  return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\n\nvar colonHostContextPartReplacer = function colonHostContextPartReplacer(host, part, suffix) {\n  if (part.indexOf(_polyfillHost) > -1) {\n    return colonHostPartReplacer(host, part, suffix);\n  } else {\n    return host + part + suffix + ', ' + part + ' ' + host + suffix;\n  }\n};\n\nvar convertColonSlotted = function convertColonSlotted(cssText, slotAttr) {\n  var regExp = _cssColonSlottedRe;\n  return cssText.replace(regExp, function () {\n    var m = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      m[_i] = arguments[_i];\n    }\n\n    if (m[2]) {\n      var compound = m[2].trim();\n      var suffix = m[3];\n      var sel = '.' + slotAttr + ' > ' + compound + suffix;\n      return sel;\n    } else {\n      return _polyfillHostNoCombinator + m[3];\n    }\n  });\n};\n\nvar convertColonHostContext = function convertColonHostContext(cssText) {\n  return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\n\nvar convertShadowDOMSelectors = function convertShadowDOMSelectors(cssText) {\n  return _shadowDOMSelectorsRe.reduce(function (result, pattern) {\n    return result.replace(pattern, ' ');\n  }, cssText);\n};\n\nvar makeScopeMatcher = function makeScopeMatcher(scopeSelector) {\n  var lre = /\\[/g;\n  var rre = /\\]/g;\n  scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n  return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n};\n\nvar selectorNeedsScoping = function selectorNeedsScoping(selector, scopeSelector) {\n  var re = makeScopeMatcher(scopeSelector);\n  return !re.test(selector);\n};\n\nvar applySimpleSelectorScope = function applySimpleSelectorScope(selector, scopeSelector, hostSelector) {\n  // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n  _polyfillHostRe.lastIndex = 0;\n\n  if (_polyfillHostRe.test(selector)) {\n    var replaceBy_1 = \".\" + hostSelector;\n    return selector.replace(_polyfillHostNoCombinatorRe, function (_, selector) {\n      return selector.replace(/([^:]*)(:*)(.*)/, function (_, before, colon, after) {\n        return before + replaceBy_1 + colon + after;\n      });\n    }).replace(_polyfillHostRe, replaceBy_1 + ' ');\n  }\n\n  return scopeSelector + ' ' + selector;\n};\n\nvar applyStrictSelectorScope = function applyStrictSelectorScope(selector, scopeSelector, hostSelector) {\n  var isRe = /\\[is=([^\\]]*)\\]/g;\n  scopeSelector = scopeSelector.replace(isRe, function (_) {\n    var parts = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      parts[_i - 1] = arguments[_i];\n    }\n\n    return parts[0];\n  });\n  var className = '.' + scopeSelector;\n\n  var _scopeSelectorPart = function _scopeSelectorPart(p) {\n    var scopedP = p.trim();\n\n    if (!scopedP) {\n      return '';\n    }\n\n    if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n      scopedP = applySimpleSelectorScope(p, scopeSelector, hostSelector);\n    } else {\n      // remove :host since it should be unnecessary\n      var t = p.replace(_polyfillHostRe, '');\n\n      if (t.length > 0) {\n        var matches = t.match(/([^:]*)(:*)(.*)/);\n\n        if (matches) {\n          scopedP = matches[1] + className + matches[2] + matches[3];\n        }\n      }\n    }\n\n    return scopedP;\n  };\n\n  var safeContent = safeSelector(selector);\n  selector = safeContent.content;\n  var scopedSelector = '';\n  var startIndex = 0;\n  var res;\n  var sep = /( |>|\\+|~(?!=))\\s*/g; // If a selector appears before :host it should not be shimmed as it\n  // matches on ancestor elements and not on elements in the host's shadow\n  // `:host-context(div)` is transformed to\n  // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n  // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n  // Historically `component-tag:host` was matching the component so we also want to preserve\n  // this behavior to avoid breaking legacy apps (it should not match).\n  // The behavior should be:\n  // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n  // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n  //   `:host-context(tag)`)\n\n  var hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1; // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n\n  var shouldScope = !hasHost;\n\n  while ((res = sep.exec(selector)) !== null) {\n    var separator = res[1];\n    var part_1 = selector.slice(startIndex, res.index).trim();\n    shouldScope = shouldScope || part_1.indexOf(_polyfillHostNoCombinator) > -1;\n    var scopedPart = shouldScope ? _scopeSelectorPart(part_1) : part_1;\n    scopedSelector += scopedPart + \" \" + separator + \" \";\n    startIndex = sep.lastIndex;\n  }\n\n  var part = selector.substring(startIndex);\n  shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n  scopedSelector += shouldScope ? _scopeSelectorPart(part) : part; // replace the placeholders with their original values\n\n  return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\n\nvar scopeSelector = function scopeSelector(selector, scopeSelectorText, hostSelector, slotSelector) {\n  return selector.split(',').map(function (shallowPart) {\n    if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\n      return shallowPart.trim();\n    }\n\n    if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n      return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n    } else {\n      return shallowPart.trim();\n    }\n  }).join(', ');\n};\n\nvar scopeSelectors = function scopeSelectors(cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) {\n  return processRules(cssText, function (rule) {\n    var selector = rule.selector;\n    var content = rule.content;\n\n    if (rule.selector[0] !== '@') {\n      selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n    } else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n      content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\n    }\n\n    var cssRule = {\n      selector: selector.replace(/\\s{2,}/g, ' ').trim(),\n      content: content\n    };\n    return cssRule;\n  });\n};\n\nvar scopeCssText = function scopeCssText(cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) {\n  cssText = insertPolyfillHostInCssText(cssText);\n  cssText = convertColonHost(cssText);\n  cssText = convertColonHostContext(cssText);\n  cssText = convertColonSlotted(cssText, slotScopeId);\n  cssText = convertShadowDOMSelectors(cssText);\n\n  if (scopeId) {\n    cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\n  }\n\n  cssText = cssText.replace(/-shadowcsshost-no-combinator/g, \".\" + hostScopeId);\n  cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\n  return cssText.trim();\n};\n\nvar scopeCss = function scopeCss(cssText, scopeId, commentOriginalSelector) {\n  var hostScopeId = scopeId + '-h';\n  var slotScopeId = scopeId + '-s';\n  var commentsWithHash = extractCommentsWithHash(cssText);\n  cssText = stripComments(cssText);\n  var orgSelectors = [];\n\n  if (commentOriginalSelector) {\n    var processCommentedSelector_1 = function processCommentedSelector_1(rule) {\n      var placeholder = \"/*!@___\" + orgSelectors.length + \"___*/\";\n      var comment = \"/*!@\" + rule.selector + \"*/\";\n      orgSelectors.push({\n        placeholder: placeholder,\n        comment: comment\n      });\n      rule.selector = placeholder + rule.selector;\n      return rule;\n    };\n\n    cssText = processRules(cssText, function (rule) {\n      if (rule.selector[0] !== '@') {\n        return processCommentedSelector_1(rule);\n      } else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n        rule.content = processRules(rule.content, processCommentedSelector_1);\n        return rule;\n      }\n\n      return rule;\n    });\n  }\n\n  var scopedCssText = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\n  cssText = [scopedCssText].concat(commentsWithHash).join('\\n');\n\n  if (commentOriginalSelector) {\n    orgSelectors.forEach(function (_a) {\n      var placeholder = _a.placeholder,\n          comment = _a.comment;\n      cssText = cssText.replace(placeholder, comment);\n    });\n  }\n\n  return cssText;\n};\n\nexport { scopeCss };"],"sourceRoot":""}